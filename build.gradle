apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}


dependencies {
    compile 'com.google.guava:guava:18.0'

    testCompile group: 'junit', name: 'junit', version: '4.+'

    compile 'org.mongodb:mongo-java-driver:3.2.1'

    compile 'com.googlecode.json-simple:json-simple:1.1'

    compile 'org.jsoup:jsoup:1.7.2'

    compile 'org.apache.tika:tika-app:1.11'

    compile 'org.glassfish:javax.json:1.0.4'

    runtime 'org.apache.tika:tika-parsers:1.11'
    
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'

	compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.0'
	
	compile 'org.apache.hadoop:hadoop-core:0.20.2'

	
}


test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

defaultTasks 'clean', 'hello'

task hello(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'edu.csula.cs454.example.HelloWorld'

    // simple defensive programming to define optional arguments
    if (project.hasProperty("arguments")) {
        args arguments.split(" ")
    }
}

task readFile(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'edu.csula.cs454.example.FileRead'
}

task fatJar(type: Jar){
    sourceSets.main.java.srcDirs = ['src']

    zip64 true

    manifest{
        attributes 'Title': 'Gradle Jar Crawler',
                'Implementation-Version': version,
                'Main-Class': 'Homework.DesktopCrawler'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }{
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
}